name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on semver tags like v1.0.0, v2.1.3, etc.

permissions:
  contents: write

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch all history for changelog generation

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Validate semver tag
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "Building release for tag: $TAG"
        # Validate semver format (v1.2.3, v1.2.3-alpha.1, etc.)
        if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "❌ Invalid semver tag format: $TAG"
          echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
          exit 1
        fi
        echo "✅ Valid semver tag: $TAG"
        echo "VERSION=${TAG#v}" >> $GITHUB_ENV
        echo "TAG_NAME=$TAG" >> $GITHUB_ENV

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: go test -v ./...

    - name: Build binaries
      run: |
        mkdir -p dist

        # Build for all platforms
        platforms=(
          "darwin/amd64"
          "darwin/arm64"
          "linux/amd64"
          "linux/arm64"
        )

        for platform in "${platforms[@]}"; do
          GOOS=${platform%/*}
          GOARCH=${platform#*/}
          output="dist/meetsum-${GOOS}-${GOARCH}"

          echo "Building for ${GOOS}/${GOARCH}..."
          CGO_ENABLED=0 GOOS=$GOOS GOARCH=$GOARCH go build \
            -ldflags="-X main.Version=${{ env.VERSION }} -X main.BuildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.GitCommit=$(git rev-parse --short HEAD)" \
            -o "$output" \
            .
        done

        # Verify all binaries were created
        ls -la dist/

        # Create checksums
        cd dist
        sha256sum meetsum-* > checksums.txt
        cd ..

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag for changelog generation
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | sed -n '2p')
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, using initial commit"
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi

        echo "Generating changelog from $PREVIOUS_TAG to ${{ env.TAG_NAME }}"

        # Generate changelog from commit messages
        cat > CHANGELOG.md << 'EOF'
        # Changelog

        All notable changes to meetsum are documented here.

        ## [${{ env.TAG_NAME }}] - $(date +%Y-%m-%d)

        ### Changes in this release:

        EOF

        # Get commits since last tag, format them nicely
        git log $PREVIOUS_TAG..${{ env.TAG_NAME }} --pretty=format:"- %s" --no-merges >> CHANGELOG.md

        echo "" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Technical Details:" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...${{ env.TAG_NAME }}" >> CHANGELOG.md
        echo "- **Release Date**: $(date +%Y-%m-%d)" >> CHANGELOG.md
        echo "- **Git Commit**: $(git rev-parse --short HEAD)" >> CHANGELOG.md

        # Save changelog for release notes
        cat CHANGELOG.md

        # Format for GitHub release (escape newlines)
        {
          echo 'RELEASE_NOTES<<EOF'
          cat CHANGELOG.md
          echo EOF
        } >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ env.TAG_NAME }}
        name: "Release ${{ env.TAG_NAME }}"
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ contains(env.TAG_NAME, '-') }}  # Pre-release if tag contains hyphen (v1.0.0-alpha.1)
        files: |
          dist/meetsum-*
          dist/checksums.txt
        generate_release_notes: false  # We're providing custom release notes
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: meetsum-binaries-${{ env.VERSION }}
        path: |
          dist/meetsum-*
          dist/checksums.txt
        retention-days: 90

  # Optional: Update Homebrew formula (if you want to create a tap later)
  # homebrew:
  #   needs: release
  #   runs-on: ubuntu-latest
  #   if: "!contains(github.ref, '-')"  # Only for stable releases, not pre-releases
  #   steps:
  #   - name: Update Homebrew formula
  #     run: |
  #       echo "Future: Update Homebrew tap with new release"
  #       echo "See: https://docs.brew.sh/How-To-Open-a-Homebrew-Pull-Request"