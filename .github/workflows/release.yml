name: Release

on:
  push:
    tags:
      - 'v*.*.*'  # Triggers on semver tags like v1.0.0, v2.1.3, etc.

permissions:
  contents: write

jobs:
  # First, validate and prepare the release
  prepare:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag_name: ${{ steps.version.outputs.tag_name }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Validate and extract version
      id: version
      run: |
        TAG=${GITHUB_REF#refs/tags/}
        echo "Building release for tag: $TAG"

        # Validate semver format
        if [[ ! $TAG =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9.-]+)?$ ]]; then
          echo "❌ Invalid semver tag format: $TAG"
          exit 1
        fi

        echo "✅ Valid semver tag: $TAG"
        echo "version=${TAG#v}" >> $GITHUB_OUTPUT
        echo "tag_name=$TAG" >> $GITHUB_OUTPUT

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install build dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: Run tests
      run: go test -v ./...

  # Build binaries for each platform
  build:
    needs: prepare
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            goos: linux
            goarch: amd64
            cc: gcc
          - os: ubuntu-latest
            goos: linux
            goarch: arm64
            cc: aarch64-linux-gnu-gcc
            setup: sudo apt-get update && sudo apt-get install -y gcc-aarch64-linux-gnu
          - os: macos-latest
            goos: darwin
            goarch: amd64
            cc: clang
          - os: macos-latest
            goos: darwin
            goarch: arm64
            cc: clang

    runs-on: ${{ matrix.os }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install cross-compilation dependencies
      if: matrix.setup
      run: ${{ matrix.setup }}

    - name: Build binary
      env:
        CC: ${{ matrix.cc }}
        CGO_ENABLED: 1
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        go build \
          -ldflags="-X main.Version=${{ needs.prepare.outputs.version }} -X main.BuildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.GitCommit=$(git rev-parse --short HEAD)" \
          -o meetsum-${{ matrix.goos }}-${{ matrix.goarch }} \
          .

    - name: Upload build artifact
      uses: actions/upload-artifact@v4
      with:
        name: meetsum-${{ matrix.goos }}-${{ matrix.goarch }}
        path: meetsum-${{ matrix.goos }}-${{ matrix.goarch }}
        retention-days: 1

  # Create the release with all binaries
  release:
    needs: [prepare, build]
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: dist/

    - name: Reorganize artifacts
      run: |
        # Move binaries from artifact directories to dist root
        mkdir -p binaries
        find dist/ -name "meetsum-*" -type f -exec mv {} binaries/ \;
        ls -la binaries/

    - name: Create checksums
      run: |
        cd binaries
        sha256sum meetsum-* > checksums.txt
        cat checksums.txt

    - name: Generate changelog
      id: changelog
      run: |
        # Get the previous tag for changelog generation
        PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | sed -n '2p')
        if [ -z "$PREVIOUS_TAG" ]; then
          echo "No previous tag found, using initial commit"
          PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
        fi

        echo "Generating changelog from $PREVIOUS_TAG to ${{ needs.prepare.outputs.tag_name }}"

        # Generate changelog
        cat > CHANGELOG.md << 'EOF'
        # Release ${{ needs.prepare.outputs.tag_name }}

        ## What's Changed

        EOF

        # Get commits since last tag
        git log $PREVIOUS_TAG..${{ needs.prepare.outputs.tag_name }} --pretty=format:"- %s" --no-merges >> CHANGELOG.md

        echo "" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Technical Details" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "- **Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...${{ needs.prepare.outputs.tag_name }}" >> CHANGELOG.md
        echo "- **Release Date**: $(date +%Y-%m-%d)" >> CHANGELOG.md
        echo "- **Git Commit**: $(git rev-parse --short HEAD)" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "## Installation" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Download Pre-built Binaries" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "Choose the appropriate binary for your platform:" >> CHANGELOG.md
        echo "- **Linux AMD64**: \`meetsum-linux-amd64\`" >> CHANGELOG.md
        echo "- **Linux ARM64**: \`meetsum-linux-arm64\`" >> CHANGELOG.md
        echo "- **macOS Intel**: \`meetsum-darwin-amd64\`" >> CHANGELOG.md
        echo "- **macOS Apple Silicon**: \`meetsum-darwin-arm64\`" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "### Install from Source" >> CHANGELOG.md
        echo "" >> CHANGELOG.md
        echo "\`\`\`bash" >> CHANGELOG.md
        echo "go install github.com/bashfulrobot/meetsum@${{ needs.prepare.outputs.tag_name }}" >> CHANGELOG.md
        echo "\`\`\`" >> CHANGELOG.md

        # Save for GitHub release
        cat CHANGELOG.md
        {
          echo 'RELEASE_NOTES<<EOF'
          cat CHANGELOG.md
          echo EOF
        } >> $GITHUB_ENV

    - name: Create GitHub Release
      uses: softprops/action-gh-release@v1
      with:
        tag_name: ${{ needs.prepare.outputs.tag_name }}
        name: "Release ${{ needs.prepare.outputs.tag_name }}"
        body: ${{ env.RELEASE_NOTES }}
        draft: false
        prerelease: ${{ contains(needs.prepare.outputs.tag_name, '-') }}
        files: |
          binaries/meetsum-*
          binaries/checksums.txt
        generate_release_notes: false
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Upload complete release artifacts
      uses: actions/upload-artifact@v4
      with:
        name: meetsum-release-${{ needs.prepare.outputs.version }}
        path: |
          binaries/meetsum-*
          binaries/checksums.txt
        retention-days: 90