name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install build dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: Cache Go modules
      uses: actions/cache@v4
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Download dependencies
      run: go mod download

    - name: Verify dependencies
      run: go mod verify

    - name: Run go vet
      run: go vet ./...

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.out ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.out
        flags: unittests
        name: codecov-umbrella

  build:
    name: Build
    runs-on: ubuntu-latest
    needs: test

    strategy:
      matrix:
        goos: [linux, darwin]
        goarch: [amd64, arm64]

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install build dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: Build binary
      run: |
        # Note: Cross-compilation with CGO requires more complex setup
        # For now, we'll build native binaries and use cross-compilation in release workflow
        if [ "${{ matrix.goos }}" = "linux" ] && [ "${{ matrix.goarch }}" = "amd64" ]; then
          go build \
            -ldflags="-X main.Version=dev-$(git rev-parse --short HEAD) -X main.BuildTime=$(date -u +%Y-%m-%d_%H:%M:%S) -X main.GitCommit=$(git rev-parse --short HEAD)" \
            -o meetsum-${{ matrix.goos }}-${{ matrix.goarch }} \
            .
        else
          echo "Skipping cross-compilation for ${{ matrix.goos }}/${{ matrix.goarch }} - will be handled in release workflow"
          # Create placeholder file for artifact upload
          echo "Placeholder for ${{ matrix.goos }}/${{ matrix.goarch }}" > meetsum-${{ matrix.goos }}-${{ matrix.goarch }}
        fi

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: meetsum-${{ matrix.goos }}-${{ matrix.goarch }}
        path: meetsum-${{ matrix.goos }}-${{ matrix.goarch }}
        retention-days: 30

  lint:
    name: Lint
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install build dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m

  security:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version: '1.21'

    - name: Install build dependencies
      run: sudo apt-get update && sudo apt-get install -y build-essential

    - name: Run Gosec Security Scanner
      uses: securecodewarrior/github-action-gosec@master
      with:
        args: './...'

    - name: Run govulncheck
      run: |
        go install golang.org/x/vuln/cmd/govulncheck@latest
        govulncheck ./...